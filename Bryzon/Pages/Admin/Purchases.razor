@page "/admin/purchases"
@inherits OwningComponentBase<ICheckoutRepository>

<PurchasesTable TableTitle="Unshipped Purchases" Checkout="UncollectedPurchases"
                ButtonLabel="Shipped" PurchaseSelected="CollectPurchase"></PurchasesTable>

<PurchasesTable TableTitle="Shipped Purchases" Checkout="CollectedPurchases"
                ButtonLabel="Reset" PurchaseSelected="ResetPurchase"></PurchasesTable>

<button class="btn btn-info" @onclick="@(x => UpdateData())">Refresh Data</button>

@code {
    public ICheckoutRepository repo => Service;

    public IEnumerable<Checkout> AllPurchases { get; set; }
    public IEnumerable<Checkout> UncollectedPurchases { get; set; }
    public IEnumerable<Checkout> CollectedPurchases { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        AllPurchases = await repo.Checkout.ToListAsync();
        UncollectedPurchases = AllPurchases.Where(x => !x.PurchaseReceived);
        CollectedPurchases = AllPurchases.Where(x => x.PurchaseReceived);
    }

    public void CollectPurchase(int id) => UpdatePurchase(id, true);
    public void ResetPurchase(int id) => UpdatePurchase(id, false);

    private void UpdatePurchase (int id, bool purchased)
    {
        Checkout d = repo.Checkout.FirstOrDefault(x => x.CheckoutId == id);
        d.PurchaseReceived = purchased;
        repo.SaveCheckout(d);
    }
}